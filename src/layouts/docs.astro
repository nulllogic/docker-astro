---
export interface Props {
    title: string;
}

const {title} = Astro.props;

import Head from '../components/head.astro';
import Header from '../components/header.astro';
import Sidebar from "../components/sidebar.astro";
import Main from "../components/main.astro";
import Footer from '../components/footer.astro';
---

<!doctype html>
<html lang="en">
    <head>
        <Head title="XII/Grid docs" description="Desciption"/>
    </head>
    <body>
        <Header/>
        <div class="container layout">
            <Sidebar />
            <Main>
                <slot/>
            </Main>
        </div>
        <Footer/>
    </body>
</html>

<script>
    (() => {
        'use strict'

        // // Clipboard
        // const clipboard = new ClipboardJS('.btn-clipboard', {
        //     target: trigger => trigger.closest('.code-snippet').querySelector('.highlight')
        // })
        //
        // clipboard.on('success', event => {
        //
        // })
        //
        // clipboard.on('error', event => {
        //
        // })

        // Resizable

        const initDragHandle = (event, resizer, preview, limit) => {
            let position = event.clientX;
            let margin = parseInt(preview.style.marginRight, 10);
            document.documentElement.classList.add('dragging')

            document.onmousemove = (event) => {
                return eventDragHandler(event, resizer, preview, position, margin, limit);
            }

            document.onmouseup = () => {
                document.onmousemove = null;
                document.onmouseup = null;
                document.documentElement.classList.remove('dragging')
            }
        }

        const eventDragHandler = (event, resizer, preview, position, margin, limit) => {

            let offset = margin + position - event.clientX;

            if (offset > 0) {
                if (offset < limit) {
                    preview.style.marginRight = offset + 'px';
                } else {
                    preview.style.marginRight = limit + 'px';
                }
            } else {
                preview.style.marginRight = '0px';
            }
        }

        window.onload = () => {
            // Wrap programmatically code blocks and add copy btn.
            document.querySelectorAll('.snippet')
                .forEach(element => {
                    let preview = element.querySelector('.preview');

                    if (preview) { // Ignore examples made be shortcode

                        let resizer = element.querySelector('.preview .resizer .drag');

                        if (resizer) {
                            let container_limit = Math.round(preview.clientWidth / 1.5);
                            // console.log(preview.style, container_limit);
                            resizer.onmousedown = (event) => {
                                return initDragHandle(event, resizer, preview, container_limit)
                            }
                        }
                    }
                })
        }

    })()
</script>

<style lang="scss">
    @media (min-width: 992px) {
        .layout {
            display: grid;
            grid-template-areas: "sidebar main";
            grid-template-columns: 1fr 5fr;
            gap: 1rem
        }
    }
</style>
