---
import prettier from "prettier";
import {codeToHtml, getHighlighter} from "shiki";

const code = await Astro.slots.render("default");

const code_formatted = await prettier.format(code, {
    parser: "mdx",
});

const html = codeToHtml(code_formatted.trim(), {
    theme: "slack-dark",
    // themes: ["slack-dark"],
    langs: [
        "java",
        "javascript",
        "html",
        "css",
        "typescript",
        "json",
        "scss",
        "vue",
    ],
    // custom element renderer
    transformers: [
        {
            code(node) {
                this.addClassToHast(node, 'language-js')
            },
            line(node, line) {
                node.properties['data-line'] = line
                if ([1, 3, 4].includes(line))
                    this.addClassToHast(node, 'highlight')
            },
            span(node, line, col) {
                node.properties['data-token'] = `token:${line}:${col}`
            },

            // code({children, className, style}) {
            //   return `<code class="${className}" style="${style}"><table>${children}</table></code>`;
            // },
            // line({className, index, children}: any) {
            //   let shallHighlight = false;
            //   let lineNumber = `<td><span class="line-number">${index + 1}</span></td>`;
            //   lineNumber = "";
            //
            //   return `<tr class="${className} ${shallHighlight ? "highlighted-line" : ""}">
            //               ${lineNumber}
            //               <td>${children}</td>
            //           </tr>`;
            // },
            // span(node, line, col) {
            //   node.properties['data-token'] = `token:${line}:${col}`
            // },
        },
    ],
});
---

<div class="snippet">
  <div class="preview">
    <div class="inline">
      <Fragment set:html={code} is:raw/>
    </div>

    <svg class="background">
      <defs>
        <pattern
            id="pattern-4d2f8758-2f66-4332-9b69-ca19e9dfc001"
            x="0"
            y="0"
            width="10"
            height="10"
            patternUnits="userSpaceOnUse"
        >
          <path d="M-3 13 15-5M-5 5l18-18M-1 21 17 3"></path>
        </pattern>
      </defs>
      <rect
          stroke="none"
          fill="url(#pattern-4d2f8758-2f66-4332-9b69-ca19e9dfc001)"
          width="100%"
          height="100%"></rect>
    </svg>

    <div class="resizer">
      <span class="drag">
        <span class="el"></span>
      </span>
    </div>
  </div>
  <Fragment client:load set:html={html} class="code"/>
</div>

<script>
    document.querySelectorAll(".snippet").forEach((element) => {
        const preview = element.querySelector(".preview");
        if (preview) {
            // Proceed, if preview is enabled

            const resizer = element.querySelector(".preview .resizer .drag");
            if (resizer) {
                const container_limit = Math.round(preview.clientWidth / 1.5);

                resizer.onmousedown = (event) => {
                    event.preventDefault();

                    const original_margin = parseFloat(
                        isNaN(preview.style.marginRight) ? preview.style.marginRight : 0,
                    );
                    const original_mouse_x = event.pageX;

                    const event_drag_start_handler = (event) => {
                        const width = original_margin - (event.pageX - original_mouse_x);
                        if (width < container_limit && width > 0) {
                            preview.style.marginRight = width + "px";
                        } else if (width < 0) {
                            preview.style.marginRight = 0 + "px";
                        }
                    };

                    const event_drag_end_handler = (event) => {
                        document.documentElement.classList.remove("dragging");
                        document.removeEventListener("mousemove", event_drag_start_handler);
                        document.removeEventListener("mouseup", event_drag_end_handler);
                    };

                    document.documentElement.classList.add("dragging");
                    document.addEventListener("mousemove", event_drag_start_handler);
                    document.addEventListener("mouseup", event_drag_end_handler);
                };
            }
        }
    });

    // // Clipboard
    // const clipboard = new ClipboardJS('.btn-clipboard', {
    //     target: trigger => trigger.closest('.code-snippet').querySelector('.highlight')
    // })
    //
    // clipboard.on('success', event => {
    //
    // })
    //
    // clipboard.on('error', event => {
    //
    // })
</script>

<style is:global lang="scss">
  .content {
    .astro-code {
      white-space: normal;
    }
  }

  .content .shiki {
    margin: 0;
    padding: 0.825rem;
  }

  .dragging {
    .snippet {
      .preview {
        &::after {
          background: rgba(58, 69, 82, 1);
        }
      }
    }

    & * {
      cursor: ew-resize;
      -webkit-user-select: none;
      user-select: none;
    }
  }

  @media (prefers-color-scheme: light) {
  }

  @media (prefers-color-scheme: dark) {
  }

  .snippet {
    position: relative;
    margin-bottom: 2rem;

    border-radius: 5px;
    border: 1px solid rgb(58, 69, 82);

    .preview {
      position: relative;
      transition: 0.75s background-color;
      padding: 1rem;

      .inline {
        position: relative;
        z-index: 10;
        display: block;
      }

      .background {
        stroke: rgba(40, 51, 56, 0.63);
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        z-index: 1;

        -webkit-user-select: none;
        user-select: none;
      }

      &::after {
        width: 1px;
        height: 100%;
        position: absolute;
        top: 0;
        right: -1px;
        display: inline-block;
        background: transparent;
        transition: 0.75s background-color;
        content: "";
      }

      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      p,
      dl,
      ol,
      ul,
      blockquote,
      pre,
      table:not(:last-child) {
        margin: 0;
      }

      .resizer {
        position: absolute;
        right: 0;
        top: 0;
        bottom: 0;
        -webkit-user-select: none;
        user-select: none;

        .drag {
          padding: 0.5rem;
          touch-action: pan-y;
          cursor: ew-resize;
          display: block;
          position: absolute;
          top: 50%;
          left: 0.75rem;
          transform: translate(-50%, -50%);
          user-select: none;

          .el {
            background: rgba(100, 116, 139, 0.6);
            border-radius: 10px;
            width: 0.375rem;
            height: 2rem;
            display: block;
          }
        }
      }
    }

    .code {
      display: block;
      margin-bottom: 0;
      width: 100%;
      position: relative;
      overflow: auto;

      code {
        word-break: normal;
        background: inherit;
      }
    }
  }
</style>

