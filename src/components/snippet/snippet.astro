---
import prettier from 'prettier'
import shiki, {renderToHtml, getHighlighter} from 'shiki'

const code = await Astro.slots.render('default');

const code_formatted = await prettier.format(code, {
    parser: 'mdx'
})


const highlighter = await getHighlighter({
    theme: 'slack-dark',
    themes: ['slack-dark'],
    langs: ['java', 'javascript', 'html', 'css', 'typescript', 'json', 'scss', 'vue'],
})

const tokens = highlighter.codeToThemedTokens(code_formatted.trim(), 'js')

const html = renderToHtml(tokens, {
    fg: highlighter.getForegroundColor('slack-dark'),
    bg: highlighter.getBackgroundColor('slack-dark'),
    // custom element renderer
    elements: {
        pre({className, style, children}: any) {
            return `<pre tabindex="1" class="${className} code" style="${style}">${children}</pre>`
        },
        code({children, className, style}) {
            return `<code class="${className}" style="${style}"><table>${children}</table></code>`
        },
        line({className, index, children}: any) {
            let shallHighlight = false
            let lineNumber = `<td><span class="line-number">${index + 1}</span></td>`
            lineNumber = ''

            return `<tr class="${className} ${shallHighlight ? 'highlighted-line' : ''}">
                        ${lineNumber}
                        <td>${children}</td>
                    </tr>`
        },
    },
})
---

<div class="snippet">
    <div class="preview">

        <div class="inline">
            <Fragment set:html={code} is:raw />
        </div>

        <svg class="background">
            <defs>
                <pattern id="pattern-4d2f8758-2f66-4332-9b69-ca19e9dfc001" x="0" y="0" width="10" height="10"
                         patternUnits="userSpaceOnUse">
                    <path d="M-3 13 15-5M-5 5l18-18M-1 21 17 3"></path>
                </pattern>
            </defs>
            <rect stroke="none" fill="url(#pattern-4d2f8758-2f66-4332-9b69-ca19e9dfc001)" width="100%"
                  height="100%"></rect>
        </svg>

        <div class="resizer">
            <span class="drag">
                <span class="el"></span>
            </span>
        </div>
    </div>
    <Fragment client:load set:html={html} class="code"/>
</div>

<script>

    const initDragHandle = (event, resizer, preview, limit) => {
        let position = event.clientX;
        let margin = parseInt(preview.style.marginRight, 10);
        document.documentElement.classList.add('dragging')

        document.onmousemove = (event) => {
            return eventDragHandler(event, resizer, preview, position, margin, limit);
        }

        document.onmouseup = () => {
            document.onmousemove = null;
            document.onmouseup = null;
            document.documentElement.classList.remove('dragging')
        }
    }

    const eventDragHandler = (event, resizer, preview, position, margin, limit) => {

        let offset = margin + position - event.clientX;

        if (offset > 0) {
            if (offset < limit) {
                preview.style.marginRight = offset + 'px';
            } else {
                preview.style.marginRight = limit + 'px';
            }
        } else {
            preview.style.marginRight = '0px';
        }
    }

    document.querySelectorAll('.snippet')
        .forEach(element => {
            let preview = element.querySelector('.preview');

            if (preview) { // Ignore examples made be shortcode

                let resizer = element.querySelector('.preview .resizer .drag');

                if (resizer) {
                    let container_limit = Math.round(preview.clientWidth / 1.5);
                    // console.log(preview.style, container_limit);
                    resizer.onmousedown = (event) => {
                        initDragHandle(event, resizer, preview, container_limit)
                    }
                }
            }
        })

    // // Clipboard
    // const clipboard = new ClipboardJS('.btn-clipboard', {
    //     target: trigger => trigger.closest('.code-snippet').querySelector('.highlight')
    // })
    //
    // clipboard.on('success', event => {
    //
    // })
    //
    // clipboard.on('error', event => {
    //
    // })

</script>

<style is:global lang="scss">

  .content {

    .astro-code {
      white-space: normal;
    }

  }

  .content .shiki {
    margin: 0;
    padding: 0.825rem;
  }

  .dragging {
    .snippet {
      .preview {
        &::after {
          background: rgba(58, 69, 82, 1);
        }
      }
    }

    & * {
      cursor: ew-resize;
      -webkit-user-select: none;
      user-select: none;
    }
  }

  @media (prefers-color-scheme: light) {

  }

  @media (prefers-color-scheme: dark) {
  }

  .snippet {

    position: relative;
    margin-bottom: 2rem;

    border-radius: 5px;
    border: 1px solid rgb(58, 69, 82);

    .preview {
      position: relative;
      transition: 0.75s background-color;
      padding: 1rem;

      .inline {
        position: relative;
        z-index: 10;
      }

      .background {
        stroke: rgba(40, 51, 56, 0.63);
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        z-index: 1;

        -webkit-user-select: none;
        user-select: none;
      }

      &::after {
        width: 1px;
        height: 100%;
        position: absolute;
        top: 0;
        right: -1px;
        display: inline-block;
        background: transparent;
        transition: 0.75s background-color;
        content: '';
      }

      h1, h2, h3, h4, h5, h6,
      p,
      dl,
      ol,
      ul,
      blockquote,
      pre,
      table:not(:last-child) {
        margin: 0;
      }

      .resizer {
        position: absolute;
        right: 0;
        top: 0;
        bottom: 0;
        -webkit-user-select: none;
        user-select: none;

        .drag {
          padding: .5rem;
          touch-action: pan-y;
          cursor: ew-resize;
          display: block;
          position: absolute;
          top: 50%;
          left: .75rem;
          transform: translate(-50%, -50%);
          user-select: none;

          .el {
            background: rgba(100, 116, 139, .6);
            border-radius: 10px;
            width: .375rem;
            height: 2rem;
            display: block;
          }

        }
      }
    }

    .code {

      display: block;
      margin-bottom: 0;
      width: 100%;
      position: relative;
      overflow: auto;

      code {
        word-break: normal;
      }
    }

  }
</style>
